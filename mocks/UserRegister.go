// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/johnfercher/go-hexagonal/internal/core/models"
	mock "github.com/stretchr/testify/mock"
)

// UserRegister is an autogenerated mock type for the UserRegister type
type UserRegister struct {
	mock.Mock
}

type UserRegister_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRegister) EXPECT() *UserRegister_Expecter {
	return &UserRegister_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: ctx, creation
func (_m *UserRegister) Register(ctx context.Context, creation *models.UserCreation) (string, error) {
	ret := _m.Called(ctx, creation)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserCreation) (string, error)); ok {
		return rf(ctx, creation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserCreation) string); ok {
		r0 = rf(ctx, creation)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UserCreation) error); ok {
		r1 = rf(ctx, creation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRegister_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type UserRegister_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - creation *models.UserCreation
func (_e *UserRegister_Expecter) Register(ctx interface{}, creation interface{}) *UserRegister_Register_Call {
	return &UserRegister_Register_Call{Call: _e.mock.On("Register", ctx, creation)}
}

func (_c *UserRegister_Register_Call) Run(run func(ctx context.Context, creation *models.UserCreation)) *UserRegister_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.UserCreation))
	})
	return _c
}

func (_c *UserRegister_Register_Call) Return(_a0 string, _a1 error) *UserRegister_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRegister_Register_Call) RunAndReturn(run func(context.Context, *models.UserCreation) (string, error)) *UserRegister_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRegister creates a new instance of UserRegister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRegister(t interface {
	mock.TestingT
	Cleanup(func())
},
) *UserRegister {
	mock := &UserRegister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
